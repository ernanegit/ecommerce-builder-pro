version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecommerce_builder
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5433:5432"  # ✅ Mudou para 5433 (evita conflito com porta 5432)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce_network

  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # ✅ Mudou para 6380 (evita conflito com porta 6379)
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ecommerce_backend
    restart: unless-stopped
    ports:
      - "8000:8000"  # ✅ Mantém 8000 (porta livre)
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://ecommerce_user:ecommerce_pass@postgres:5432/ecommerce_builder
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - ecommerce_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ecommerce_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"  # ✅ Mantém 3000 (porta livre)
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - ecommerce_network

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce_network:
    driver: bridge